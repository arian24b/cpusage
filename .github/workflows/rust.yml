name: Release Rust App

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: cpusage

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo test --verbose

  release:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo build --release

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\([^"]*\)".*/\1/')
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Package binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/release/cpusage.exe ${{ env.APP_NAME }}-${{ matrix.name }}.exe
          else
            cp target/release/cpusage ${{ env.APP_NAME }}-${{ matrix.name }}
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ env.APP_NAME }} v${{ steps.version.outputs.version }}"
          tag_name: ${{ github.ref_name }}
          files: "${{ env.APP_NAME }}-${{ matrix.name }}*"
          generate_release_notes: true
          draft: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  versioning:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: "24"

      - run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github @semantic-release/exec

      - run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
