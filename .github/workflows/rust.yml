name: Release Rust App

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: CPUsage

jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo test --verbose

  release:
    runs-on: macos-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo build --release

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\([^"]*\)".*/\1/')
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Create app bundle
        run: |
          mkdir -p "${APP_NAME}.app/Contents/MacOS"
          mkdir -p "${APP_NAME}.app/Contents/Resources"

          cp target/release/cpusage "${APP_NAME}.app/Contents/MacOS/"
          chmod +x "${APP_NAME}.app/Contents/MacOS/cpusage"

          if [ -f "cpusage.png" ]; then
            cp cpusage.png "${APP_NAME}.app/Contents/Resources/AppIcon.png"
            sips -s format icns "${APP_NAME}.app/Contents/Resources/AppIcon.png" --out "${APP_NAME}.app/Contents/Resources/AppIcon.icns"
          fi

          VERSION="${{ steps.version.outputs.version }}"
          cat > "${APP_NAME}.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>cpusage</string>
              <key>CFBundleIdentifier</key>
              <string>com.arian24b.cpusage</string>
              <key>CFBundleName</key>
              <string>CPUsage</string>
              <key>CFBundleVersion</key>
              <string>$VERSION</string>
              <key>CFBundleShortVersionString</key>
              <string>$VERSION</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSUIElement</key>
              <true/>
              <key>CFBundleCategory</key>
              <string>Utility</string>
          </dict>
          </plist>
          EOF

      - name: Package app
        run: ditto -c -k --sequesterRsrc --keepParent "${APP_NAME}.app" "${APP_NAME}.zip"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: "${APP_NAME} v${{ steps.version.outputs.version }}"
          tag_name: ${{ github.ref_name }}
          files: "${APP_NAME}.zip"
          generate_release_notes: true
          draft: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf "${APP_NAME}.app"

  versioning:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github @semantic-release/exec

      - run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
