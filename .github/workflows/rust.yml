name: Release Rust App

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  CARGO_TERM_COLOR: always
  APP_NAME: "CPUsage"

jobs:
  test:
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

  release:
    runs-on: macos-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build application
        run: cargo build --release

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          echo "Reading version from Cargo.toml..."
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\([^"]*\)".*/\1/')
          if [ -z "$VERSION" ]; then
            echo "Version not found in Cargo.toml, using fallback"
            VERSION="1.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
          echo "GITHUB_OUTPUT file exists: $(test -f $GITHUB_OUTPUT && echo 'yes' || echo 'no')"

      - name: Verify version
        run: |
          echo "Version from step: ${{ steps.get_version.outputs.version }}"
          if [ -z "${{ steps.get_version.outputs.version }}" ]; then
            echo "Version output is empty, this will cause issues"
            exit 1
          fi

      - name: Create .app bundle structure
        run: |
          mkdir -p "${{ env.APP_NAME }}.app/Contents/MacOS"
          mkdir -p "${{ env.APP_NAME }}.app/Contents/Resources"

          # Copy the binary
          cp "target/release/cpusage" "${{ env.APP_NAME }}.app/Contents/MacOS/"

          # Convert PNG icon to ICNS format and copy to Resources
          cp "cpusage.png" "${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.png"
          sips -s format icns "${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.png" --out "${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.icns"

          # Create Info.plist
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "Final version being used: $VERSION"
          cat > "${{ env.APP_NAME }}.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>cpusage</string>
              <key>CFBundleIdentifier</key>
              <string>com.arian24b.cpusage</string>
              <key>CFBundleName</key>
              <string>CPUsage</string>
              <key>CFBundleVersion</key>
              <string>$VERSION</string>
              <key>CFBundleShortVersionString</key>
              <string>$VERSION</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSUIElement</key>
              <true/>
              <key>CFBundleCategory</key>
              <string>Utility</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
          </dict>
          </plist>
          EOF

      - name: Verify app bundle
        run: |
          echo "App bundle created successfully"
          ls -la "${{ env.APP_NAME }}.app/Contents/"
          echo "Info.plist contents:"
          cat "${{ env.APP_NAME }}.app/Contents/Info.plist"

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -rf "${{ env.APP_NAME }}.app" || true

      - name: Package .app bundle
        run: |
          ditto -c -k --sequesterRsrc --keepParent "${{ env.APP_NAME }}.app" "${{ env.APP_NAME }}.zip"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "CPUsage v${{ steps.get_version.outputs.version || '1.0.0' }}"
          tag_name: ${{ github.ref_name }}
          files: "${{ env.APP_NAME }}.zip"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github @semantic-release/exec

      - name: Run semantic-release
        run: |
          semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
